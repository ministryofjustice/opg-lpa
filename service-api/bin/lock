#!/usr/bin/env php
<?php

include __DIR__ . '/../vendor/autoload.php';

use Aws\DynamoDb\DynamoDbClient;
use Aws\DynamoDb\Exception\DynamoDbException;

echo "X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0 LOCKLOCKLOCK Calling lock script from service-api\n";

/**
 * Options:
 *      --name:     Lock name within the table.
 *      --table:    DynamoDB table name.
 *      --ttl:      Time to hold the lock for.
 *
 *      --endpoint: The DynamoDB endpoint to use. Defaults to none.
 *      --version:  The endpoint version to use. Defaults to 2012-08-10.
 *      --region:   AWS region the table is in. Defaults to eu-west-1.
 */

$cmd = new Commando\Command();

$cmd->option()
    ->require()
    ->describedAs('The action to perform. Currently only \'acquire\'');

$cmd->option('name')
    ->require()
    ->describedAs('Lock name. Represents this lock within the DynamoDB table');

$cmd->option('table')
    ->require()
    ->describedAs('DynamoDB table name');

$cmd->option('ttl')
    ->require()
    ->describedAs('The length of time in seconds the lock should be held for, it acquired')
    ->must(function ($value) {
        return ctype_digit($value);
    });

$cmd->option('endpoint')
    ->describedAs('DynamoDB endpoint. For local development only.');

$cmd->option('version')
    ->describedAs('End point version. Default to 2012-08-10')
    ->defaultsTo('2012-08-10');

$cmd->option('region')
    ->describedAs('AWS region. Default to eu-west-1')
    ->defaultsTo('eu-west-1');

//----------------------------------

$dynamoDb = new DynamoDbClient([
    'endpoint' => $cmd['endpoint'] ?: null,
    'version' => $cmd['version'],
    'region' => $cmd['region'],
]);

// Current time in milliseconds
$time = round(microtime(true) * 1000);

// If the existing lock is older than this time, we can take the lock
$takeLockIfOlderThan = $time - ( $cmd['ttl'] * 1000 );

try {
    $dynamoDb->updateItem([
        'TableName' => $cmd['table'],
        'Key'       => [ 'id' => [ 'S' => $cmd['name'] ] ],
        'ExpressionAttributeNames' => [
            '#updated' => 'updated',
        ],
        'ExpressionAttributeValues' => [
            ':updated' => [ 'N' => (string)$time ],
            ':diff' => [ 'N' => (string)$takeLockIfOlderThan ],
        ],
        // If the lock is old, or the row doesn't exist...
        'ConditionExpression' => '#updated < :diff or attribute_not_exists(#updated)',
        'UpdateExpression' => 'SET #updated=:updated',
        'ReturnValues' => 'NONE',
        'ReturnConsumedCapacity' => 'NONE'
    ]);

    // No exception means we got the lock.
    // Otherwise a ConditionalCheckFailedException is thrown.

    echo "Acquired lock\n";
    exit(0);
} catch (DynamoDbException $e) {
    // We expect a ConditionalCheckFailedException
    // Anything else is a 'real' exception.
    if ($e->getAwsErrorCode() !== 'ConditionalCheckFailedException') {
        echo "Exception: " . $e->getMessage()."\n";
        exit(2);
    }
}

echo "Unable to acquire lock\n";
exit(1);
