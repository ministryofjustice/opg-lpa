version: 2.1

workflows:
  pr-build-and-test:
    jobs:
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: docker_build_lpa_front
          ecr_repository_name_prefix: online-lpa/front
          github_repository_name: opg-lpa-front
          github_branch_name: LPA-3289-ecs-container
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: docker_build_lpa_admin
          ecr_repository_name_prefix: online-lpa/admin
          github_repository_name: opg-lpa-admin
          github_branch_name: LPA-3289-ecs-container
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: docker_build_lpa_api
          ecr_repository_name_prefix: online-lpa/api
          github_repository_name: opg-lpa-api
          github_branch_name: LPA-3289-ecs-container
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: docker_build_lpa_pdf
          ecr_repository_name_prefix: online-lpa/pdf
          github_repository_name: opg-lpa-pdf
          github_branch_name: LPA-3289-ecs-container


      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: lint_and_validate_terraform
          filters:
            branches:
              ignore: master

      - infrastructure_and_deployment/apply_account_terraform:
          name: dev_apply_account_terraform
          workspace: development
          requires: [lint_and_validate_terraform]
          filters:
            branches:
              ignore: master

      # - infrastructure_and_deployment/apply_environment_terraform:
      #     name: dev_apply_environment_terraform
      #     requires: [dev_apply_account_terraform]
      #     filters:
      #       branches:
      #         ignore: master

      - infrastructure_and_deployment/apply_account_terraform:
          name: preprod_apply_account_terraform
          workspace: preproduction
          filters:
            branches:
              only: master

      - infrastructure_and_deployment/apply_account_terraform:
          name: prod_apply_account_terraform
          workspace: production
          requires: [preprod_apply_account_terraform]
          filters:
            branches:
              only: master
              

orbs:
  build_containers_and_push_to_ecr:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      ecr_login:
        steps:
          - run:
              name: Login to ECR
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::311462405659:role/ci --role-session-name ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                eval $(aws ecr get-login --no-include-email --region=eu-west-1)
    executors:
      python:
        docker: 
          - image: circleci/python
    jobs:
      checkout_docker_build_push_web-app:
        executor: python
        parameters:
          ecr_url:
            type: string
            default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com  
          ecr_repository_name_prefix:
            type: string
            description: The ecr repo name up to _app or _web. These will be assumed to be present and added by the job.
          github_repository_name:
            type: string
          github_branch_name:
            type: string
            default: master
        steps:
          - checkout
          - install_aws_cli
          - setup_remote_docker:
              version: 18.06.0-ce
              docker_layer_caching: false
          - run:
              name: checkout lpa repository
              command: |
                git clone --branch << parameters.github_branch_name >> git@github.com:ministryofjustice/<< parameters.github_repository_name >>
          - run:
              name: Build web container
              command: |
                if [ << parameters.github_repository_name >> != "opg-lpa-pdf" ]; then
                  docker build -f << parameters.github_repository_name >>/docker/web/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web .
                fi
          - run:
              name: Build app container
              command: |
                docker build -f << parameters.github_repository_name >>/docker/app/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app .
          - ecr_login
          - run:
              name: Push web container
              command: |
                if [ << parameters.github_repository_name >> != "opg-lpa-pdf" ]; then
                  export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:latest
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:latest << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:$CIRCLE_BRANCH-$SHORT_HASH
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web
                fi
          - run:
              name: Push app container
              command: |
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:latest
                docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:latest << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:$CIRCLE_BRANCH-$SHORT_HASH
                docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app

  infrastructure_and_deployment:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
    executors:
      python:
        docker: [image: circleci/python]
      python-browsers:
        docker: [image: circleci/python:3.6-stretch-browsers]
      terraform:
        docker: [image: hashicorp/terraform:0.12.5]
    jobs:
      #----------------------------------------------------
      # Terraform
      lint_and_validate_terraform:
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        executor: terraform
        steps:
          - checkout
          - run:
              name: terraform lint
              command: terraform fmt -diff -check -recursive
          - run:
              name: Validate Account Terraform
              command: |
                terraform --version
                cd ~/project/terraform/terraform_account
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=development >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform validate
          # - run:
          #     name: Lint Environment Terraform
          #     command: |
          #       export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
          #       echo $SHORT_HASH
          #       cd ~/project/terraform/terraform_environment
          #       terraform init -lock-timeout=300s
          #       export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
          #       echo $TF_WORKSPACE
          #       terraform validate -var container_version=$CIRCLE_BRANCH-$SHORT_HASH

      apply_account_terraform:
        #
        # Apply the shared terraform configuration. This:
        #   - Updates the account infrastructure;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: development
        steps:
          - checkout
          - run:
              name: Apply Account Terraform
              command: |
                cd ~/project/terraform/terraform_account
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=<<parameters.workspace>>
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s --auto-approve


      apply_environment_terraform:
        #
        # Apply the environment terraform configuration. This:
        #   - Updates per environment infrastructure; and
        #   - Triggers a deploy of the updated container (if changed)
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        steps:
          - checkout
          - run:
              name: Apply Environment Terraform
              command: |
                ENV_NAME=<<parameters.workspace>>
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                echo $SHORT_HASH
                cd ~/project/terraform/terraform_environment
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s --auto-approve -var container_version=$CIRCLE_BRANCH-$SHORT_HASH
          #       mv cluster_config.json /tmp/
          # - persist_to_workspace:
          #     root: /tmp
          #     paths:
          #       - cluster_config.json

      destroy_dev_environment:
        #
        # Destroys a development environment after testing and approval
        # Cannot be run on master branch
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        steps:
          - checkout
          - run:
              name: Destroy Development Environment
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                if [ "${CIRCLE_BRANCH}" != "master" ]; then
                  cd terraform/terraform_environment
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi      

