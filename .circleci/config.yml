version: 2.1

workflows:
  pr-build-and-test:
    jobs:
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: front_docker_build
          ecr_repository_name_prefix: online-lpa/front
          service_path: service-front
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: admin_docker_build
          ecr_repository_name_prefix: online-lpa/admin
          service_path: service-admin
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: api_docker_build
          ecr_repository_name_prefix: online-lpa/api
          service_path: service-api
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: pdf_docker_build
          ecr_repository_name_prefix: online-lpa/pdf
          service_path: service-pdf
          build_web: false
      - build_containers_and_push_to_ecr/checkout_docker_build_push_web-app:
          name: seeding_docker_build
          ecr_repository_name_prefix: online-lpa/seeding
          service_path: service-seeding
          build_web: false
          unit_test: false

      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: lint_and_validate_terraform
          filters:
            branches:
              ignore: master

      - infrastructure_and_deployment/apply_account_terraform:
          name: dev_account_apply_terraform
          workspace: development
          requires: [lint_and_validate_terraform]
          filters:
            branches:
              ignore: master
      - infrastructure_and_deployment/apply_email_terraform:
          name: email_apply_terraform
          workspace: development
          requires: [lint_and_validate_terraform]
          filters:
            branches:
              ignore: master
      - infrastructure_and_deployment/apply_environment_terraform:
          name: dev_environment_apply_terraform
          requires:
            [
              dev_account_apply_terraform,
              front_docker_build,
              admin_docker_build,
              api_docker_build,
              pdf_docker_build,
              seeding_docker_build,
            ]
          filters:
            branches:
              ignore: master

      - ecr_scan_results:
          name: ecr_scan_results_development
          filters: { branches: { ignore: [master] } }
          requires:
            [
              front_docker_build,
              admin_docker_build,
              api_docker_build,
              pdf_docker_build,
              seeding_docker_build,
              dev_environment_apply_terraform,
            ]

      - infrastructure_and_deployment/seed_environment_databases:
          name: dev_seed_environment_databases
          requires: [dev_environment_apply_terraform]
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/run_functional_test:
          name: run_functional_test
          requires: [dev_seed_environment_databases]
          filters:
            branches:
              ignore: master

      - slack_notify_domain:
          name: post_environment_domains
          requires: [run_functional_test]
          filters:
            branches:
              ignore: master

      - hold-for-destruction:
          name: hold_env_for_destruction
          type: approval
          requires: [post_environment_domains]
          filters:
            branches:
              ignore: master
      - infrastructure_and_deployment/destroy_dev_environment:
          name: dev_destroy_environment
          requires: [hold_env_for_destruction]
          filters:
            branches:
              ignore: master

      - infrastructure_and_deployment/apply_account_terraform:
          name: preprod_account_apply_terraform
          workspace: preproduction
          filters:
            branches:
              only: master
      - infrastructure_and_deployment/apply_environment_terraform:
          name: preprod_environment_apply_terraform
          requires:
            [
              preprod_account_apply_terraform,
              front_docker_build,
              admin_docker_build,
              api_docker_build,
              pdf_docker_build,
            ]
          workspace: preproduction
          filters:
            branches:
              only: master

      - ecr_scan_results:
          name: ecr_scan_results_master
          filters: { branches: { only: [master] } }
          requires:
            [
              front_docker_build,
              admin_docker_build,
              api_docker_build,
              pdf_docker_build,
              preprod_environment_apply_terraform,
            ]

      - infrastructure_and_deployment/seed_environment_databases:
          name: preprod_seed_environment_databases
          workspace: preproduction
          requires: [preprod_environment_apply_terraform]
          filters: { branches: { only: [master] } }

      - infrastructure_and_deployment/run_functional_test:
          name: preprod_test_functional
          requires: [preprod_seed_environment_databases]
          workspace: preproduction
          filters:
            branches:
              only: master

      - infrastructure_and_deployment/apply_account_terraform:
          name: prod_account_apply_terraform
          workspace: production
          requires: [preprod_test_functional]
          filters:
            branches:
              only: master

      - infrastructure_and_deployment/apply_environment_terraform:
          name: prod_environment_apply_terraform
          requires: [prod_account_apply_terraform]
          workspace: production
          filters:
            branches:
              only: master

      - infrastructure_and_deployment/run_healthcheck_test:
          name: test_healthcheck_prod
          requires: [prod_environment_apply_terraform]
          workspace: production
          filters:
            branches:
              only: master
      - slack_notify_production_release:
          name: post_production_release_message
          requires: [test_healthcheck_prod]
          filters:
            branches:
              only: master

orbs:
  slack: circleci/slack@3.3.0
  build_containers_and_push_to_ecr:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      ecr_login:
        steps:
          - run:
              name: Login to ECR
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::311462405659:role/opg-lpa-ci --role-session-name opg-lpa-ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    executors:
      python:
        docker:
          - image: circleci/python
    jobs:
      checkout_docker_build_push_web-app:
        executor: python
        parameters:
          ecr_url:
            type: string
            default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
          ecr_repository_name_prefix:
            type: string
            description: The ecr repo name up to _app or _web. These will be assumed to be present and added by the job.
          service_path:
            type: string
          build_web:
            type: boolean
            default: true
            description: Some services do not require a web container, set to False to skip web container builds.
          unit_test:
            type: boolean
            default: true
            description: Execute unit tests during this build
        steps:
          - checkout
          - install_aws_cli
          - setup_remote_docker:
              version: 18.06.0-ce
              docker_layer_caching: false
          - run:
              name: Build web container
              command: |
                if << parameters.build_web >> ; then
                  docker build -f << parameters.service_path >>/docker/web/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web .
                else
                  echo "web container not required for this service"
                fi
          - run:
              name: Build app container
              command: |
                docker build -f << parameters.service_path >>/docker/app/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app .
          - run:
              name: Run unit tests
              command: |
                if << parameters.unit_test >> ; then
                  docker run -d --env AWS_ACCESS_KEY_ID='-' --env AWS_SECRET_ACCESS_KEY='-' --name tests << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:latest
                  docker exec tests docker-php-ext-enable xdebug
                  docker exec tests /app/vendor/bin/phpunit
                else
                  echo "phpunit tests not required for this service"
                fi

          - ecr_login
          - run:
              name: Push web container
              command: |
                if << parameters.build_web >> ; then
                  export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:$CIRCLE_BRANCH-$SHORT_HASH
                  if [ "${CIRCLE_BRANCH}" == "master" ]; then
                    # If master, push branch tag and latest
                    docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:$CIRCLE_BRANCH-$SHORT_HASH << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:latest
                    docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web
                  else
                    # Else, push branch tag only
                    docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:$CIRCLE_BRANCH-$SHORT_HASH
                  fi
                fi
          - run:
              name: Push app container
              command: |
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:$CIRCLE_BRANCH-$SHORT_HASH
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  # If master, push branch tag and latest
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:$CIRCLE_BRANCH-$SHORT_HASH << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:latest
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app
                else
                  # Else, push branch tag only
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:$CIRCLE_BRANCH-$SHORT_HASH
                fi

  infrastructure_and_deployment:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      install_terraform:
        steps:
          - run:
              name: Install Terraform
              command: |
                export TERRAFORM_VERSION=0.12.24
                export TERRAFORM_SHA256SUM=602d2529aafdaa0f605c06adb7c72cfb585d8aa19b3f4d8d189b42589e27bf11
                curl https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip > terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                echo "${TERRAFORM_SHA256SUM}  terraform_${TERRAFORM_VERSION}_linux_amd64.zip" > terraform_${TERRAFORM_VERSION}_SHA256SUMS
                sha256sum -c --status terraform_${TERRAFORM_VERSION}_SHA256SUMS
                sudo unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /bin
                rm -f terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    executors:
      python:
        docker: [image: circleci/python]
      python-build:
        docker: [image: python:alpine]
      python-browsers:
        docker: [image: circleci/python:3.6-stretch-browsers]
      terraform:
        docker: [image: hashicorp/terraform:0.12.24]
    jobs:
      #----------------------------------------------------
      # Lambda
      package_lambda_artifact:
        executor: python-build
        steps:
          - checkout
          - run: apk add zip
          - run: pip3 install -r ~/project/workspace_destroyer_lambda/lambda/requirements.txt  --target ~/project/workspace_destroyer_lambda/lambda/vendor
          - run: cd ~/project/workspace_destroyer_lambda/lambda/vendor; zip -r9 /tmp/lambda_function_payload.zip .
          - run: cd ~/project/workspace_destroyer_lambda/lambda; zip -g /tmp/lambda_function_payload.zip service.py
          - persist_to_workspace:
              root: /tmp
              paths:
                - lambda_function_payload.zip
      #----------------------------------------------------
      # Terraform
      lint_and_validate_terraform:
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        executor: terraform
        steps:
          - checkout
          - run:
              name: terraform lint
              command: terraform fmt -diff -check -recursive
          - run:
              name: Validate Account Terraform
              command: |
                terraform --version
                cd ~/project/terraform/account
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=development >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform validate
          - run:
              name: Lint Environment Terraform
              command: |
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                echo $SHORT_HASH
                cd ~/project/terraform/environment
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform validate -var container_version=$CIRCLE_BRANCH-$SHORT_HASH

      apply_email_terraform:
        #
        # Apply the email terraform configuration. This:
        #   - Creates a mailbox used for functional testing;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: development
        steps:
          - checkout
          - run:
              name: Apply Email Terraform
              command: |
                cd ~/project/terraform/email
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=<<parameters.workspace>>
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s --auto-approve

      apply_account_terraform:
        #
        # Apply the shared terraform configuration. This:
        #   - Updates the account infrastructure;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: development
        steps:
          - checkout
          - run:
              name: Apply Account Terraform
              command: |
                cd ~/project/terraform/account
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=<<parameters.workspace>>
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s --auto-approve

      apply_environment_terraform:
        #
        # Apply the environment terraform configuration. This:
        #   - Updates per environment infrastructure; and
        #   - Triggers a deploy of the updated container (if changed)
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        steps:
          - checkout
          - run:
              name: Apply Environment Terraform
              command: |
                ENV_NAME=<<parameters.workspace>>
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                echo $SHORT_HASH
                cd ~/project/terraform/environment
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s -auto-approve -parallelism=15 -var container_version=$CIRCLE_BRANCH-$SHORT_HASH
                export ENV_DOMAINS="$(terraform output)" >> $BASH_ENV
          - persist_to_workspace:
              root: /tmp
              paths:
                - environment_pipeline_tasks_config.json

      destroy_dev_environment:
        #
        # Destroys a development environment after testing and approval
        # Cannot be run on master branch
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        steps:
          - checkout
          - run:
              name: Destroy Development Environment
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                if [ "${CIRCLE_BRANCH}" != "master" ]; then
                  cd ~/project/terraform/environment
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi
      seed_environment_databases:
        #
        # Puts data into the database for testing and demo
        #
        executor: python
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - run:
              name: Install python dependencies
              command: |
                pip install -r scripts/pipeline/requirements.txt --user
          - run:
              name: Wait for new tasks in services to be running
              command: |
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                python scripts/pipeline/ecs_monitor/ecs_monitor.py
          - run:
              name: Run seeding ecs task
              command: |
                python scripts/pipeline/start_seeding_task/ecs_start_seeding_task.py

      run_healthcheck_test:
        #
        # Checks the health check is returning 200
        #
        executor: python
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - run:
              name: Install python dependencies
              command: |
                pip install -r scripts/pipeline/requirements.txt --user
          - install_terraform
          - run:
              name: Wait for new tasks in services to be running
              command: |
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                python scripts/pipeline/ecs_monitor/ecs_monitor.py
          - run:
              name: Add CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  ENV_NAME=<<parameters.workspace>>
                  cd ~/project/terraform/account_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform apply -lock-timeout=300s -auto-approve
                fi
          - run:
              name: Run test
              command: |
                python scripts/pipeline/healthcheck_test/healthcheck_test.py
          - run:
              name: Remove CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  ENV_NAME=<<parameters.workspace>>
                  cd ~/project/terraform/account_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi
              when: always

      run_functional_test:
        #
        # Runs user journey tests using casper JS
        #
        executor: python
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
        steps:
          - checkout
          - setup_remote_docker:
              version: 18.06.0-ce
              docker_layer_caching: false
          - attach_workspace:
              at: /tmp
          - run:
              name: Build casper JS container
              command: |
                docker build -f ~/project/tests/Dockerfile  -t casperjs:latest .
                echo 'export DOCKER_REMOTE_IP="$(docker run casperjs:latest curl --silent https://checkip.amazonaws.com/)"' >> $BASH_ENV
                echo $DOCKER_REMOTE_IP

          - run:
              name: Install python dependencies
              command: |
                pip install -r scripts/pipeline/requirements.txt --user
          - install_terraform
          - run:
              name: Get URLs
              command: |
                ENV_NAME=<<parameters.workspace>>
                echo 'export TF_WORKSPACE=${ENV_NAME:0:13}' >> $BASH_ENV
                echo $TF_WORKSPACE
                echo 'export FRONT_DOMAIN="$(jq -r .front_fqdn /tmp/environment_pipeline_tasks_config.json)"' >> $BASH_ENV
          - run:
              name: Wait for new tasks in services to be running
              command: |
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                python scripts/pipeline/ecs_monitor/ecs_monitor.py
          - run:
              name: Add CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  ENV_NAME=<<parameters.workspace>>
                  cd ~/project/terraform/account_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform apply -lock-timeout=300s -auto-approve -var docker_remote_ip=$DOCKER_REMOTE_IP
                fi
          - run:
              name: Run test
              command: |
                docker run -dt -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN -e CI -e "BASE_DOMAIN=$FRONT_DOMAIN" --name casperjs casperjs:latest
                docker exec casperjs ./start.sh 'tests/'
          - run:
              name: Remove CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  ENV_NAME=<<parameters.workspace>>
                  cd ~/project/terraform/account_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi
              when: always

jobs:
  slack_notify_domain:
    docker:
      - image: circleci/python
    parameters:
      workspace:
        description: Terraform workspace name
        type: string
        default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Get URLs
          command: |
            ENV_NAME=<<parameters.workspace>>
            scripts/pipeline/set_environment_variables/set_terraform_workspace_name.sh >> $BASH_ENV
            echo $TF_WORKSPACE
            scripts/pipeline/set_environment_variables/set_slack_env_vars.sh >> $BASH_ENV
      - slack/notify:
          title: "Online LPA Development Environment Ready"
          color: "#508c18"
          message: "User: $CIRCLE_USERNAME \nfront url: https://$FRONT_DOMAIN/home \nadmin url: https://$ADMIN_DOMAIN"
          footer: "$CIRCLE_BRANCH - Commit Message: $COMMIT_MESSAGE"
  slack_notify_production_release:
    docker:
      - image: circleci/python
    parameters:
      workspace:
        description: Terraform workspace name
        type: string
        default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//[-_]/}"
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Get URLs
          command: |
            ENV_NAME=<<parameters.workspace>>
            echo 'export TF_WORKSPACE=${ENV_NAME:0:13}' >> $BASH_ENV
            echo $TF_WORKSPACE
            scripts/pipeline/set_environment_variables/set_slack_env_vars.sh >> $BASH_ENV
      - slack/notify:
          title: "Online LPA Production Release Successful"
          color: "#508c18"
          message: "By user: $CIRCLE_USERNAME \nfront url: https://$FRONT_DOMAIN/home \nadmin url: https://$ADMIN_DOMAIN"
          footer: "$CIRCLE_BRANCH - Commit Message: $COMMIT_MESSAGE"
          webhook: ${PROD_RELEASE_SLACK_WEBHOOK}

  ecr_scan_results:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - run:
          name: Check ECR Scan Results
          command: |
            sudo pip3 install -r scripts/pipeline/requirements.txt
            export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
            python scripts/pipeline/check_ecr_scan_results/aws_ecr_scan_results.py --search online-lpa --tag $CIRCLE_BRANCH-$SHORT_HASH
