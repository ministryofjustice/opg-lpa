name: "[Docker] Build and Push Images"

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      tag:
        description: "Tag for docker image"
        required: true
        type: string

jobs:
  docker_build_scan_push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - image_name: online-lpa/front_app
            dockerfile_path: ./service-front/docker/app
            service_path: ./service-front

          - image_name: online-lpa/front_web
            dockerfile_path: ./service-front/docker/web
            service_path: ./service-front

          - image_name: online-lpa/api_app
            dockerfile_path: ./service-api/docker/app
            service_path: ./service-api

          - image_name: online-lpa/api_web
            dockerfile_path: ./service-api/docker/web
            service_path: ./service-api

          - image_name: online-lpa/pgbouncer
            dockerfile_path: ./service-api/docker/pgbouncer
            service_path: ./service-api

          - image_name: online-lpa/admin_app
            dockerfile_path: ./service-admin/docker/app
            service_path: ./service-admin

          - image_name: online-lpa/admin_web
            dockerfile_path: ./service-admin/docker/web
            service_path: ./service-admin

          - image_name: online-lpa/pdf_app
            dockerfile_path: ./service-pdf/docker/app
            service_path: ./service-pdf

          - image_name: online-lpa/seeding_app
            dockerfile_path: ./service-seeding/docker/app
            service_path: ./service-seeding

          - image_name: lambda-aurora_scheduler
            dockerfile_path: ./aurora-scheduler/docker
            service_path: ./aurora-scheduler
            override_tag: latest

    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - uses: unfor19/install-aws-cli-action@3c53dab4dd62b5d9d647f0ce9519285250a3c767 # v1.0.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/opg-lpa-ci
          role-duration-seconds: 1800
          role-session-name: OPGMakeaLPAECRGithubAction

      - name: Apply override tag
        id: set_image_tag
        env:
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
          if [ ${{ matrix.override_tag }} ]; then
            IMAGE_TAG=${{ matrix.override_tag }}
          fi
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
        if: ${{ (matrix.image_name == 'online-lpa/front_web') }}
        with:
          node-version-file: '.nvmrc'

      - name: Install Dependencies
        if: ${{ (matrix.image_name == 'online-lpa/front_web') }}
        run: |
          pushd service-front/
          npm ci -y && npm install -g sass
          node_modules/grunt-cli/bin/grunt build
          popd

      - name: Setup Docker Buildx
        id: docker_buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0
        with:
          install: true

      - name: Setup Docker Layer Cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image_name }}-

      - name: Build Image
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # tag=v3.3.1
        with:
          context: .
          load: true
          tags: ${{ matrix.image_name }}:latest
          push: false
          file: ${{ matrix.dockerfile_path }}/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-args: |
            OPG_LPA_COMMON_APP_VERSION=${{ github.sha }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: ECR Login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@2fc7aceee09e9e4a7105c0d060c656fad0b4f63d # v1.7.0
        with:
          registries: 311462405659

      - name: Tag and Push Container
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.set_image_tag.outputs.image_tag }}
          IMAGE_NAME: ${{ matrix.image_name }}
        run: |
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$IMAGE_NAME:main-$IMAGE_TAG
          fi
          docker push --all-tags $ECR_REGISTRY/$IMAGE_NAME

      - name: Setup Python
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # v4.7.0
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/pipeline/check_ecr_scan_results/requirements.txt

      - name: Scan Container
        env:
          ECR_REGISTRY_ALIAS: online-lpa
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
            cd scripts/pipeline/check_ecr_scan_results/
            python aws_ecr_scan_results.py  --search ${ECR_REGISTRY_ALIAS} \
                                           --tag ${IMAGE_TAG} \
                                           --slack_channel C01BKBWGWTY \
                                           --slack_token ${{ secrets.SLACK_BOT_TOKEN }}
