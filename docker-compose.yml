version: "3.7"

services:
  # ---------------------------
  # Local Services

  node-build-assets:
    container_name: lpa-node-build-assets
    image: lpa-node-build-assets
    volumes:
      - ./service-front:/service-front
    build:
      context: ./
      dockerfile: node-build-assets/docker/Dockerfile

  postgres:
    container_name: lpa-postgres
    image: postgres:13.10
    ports:
      - 5434:5432
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: lpadb
      POSTGRES_USER: lpauser
      POSTGRES_PASSWORD: lpapass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username=lpauser --dbname=lpadb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: lpa-redis
    image: library/redis:alpine
    ports:
      - 6379:6379

  dynamodb:
    container_name: lpa-dynamodb
    image: amazon/dynamodb-local
    ports:
      - 8000:8000

  govpaystub:
    container_name: lpa-govpaystub
    image: bbyars/mountebank
    ports:
      - 2527:2525
      - 4547:4545
    volumes:
      - ./cypress/govpay-stubs:/app
    command: --allowInjection --configfile /app/mountebank-config.ejs

  localstack:
    container_name: lpa-localstack
    image: localstack/localstack:0.12.18
    privileged: true
    ports:
      - 4568:4566
    environment:
      - SERVICES=sqs,s3,lambda,secretsmanager
      - DEFAULT_REGION=eu-west-1
      - HOSTNAME=localstack
      - LAMBDA_EXECUTOR=docker
      - DEBUG=1
      # Configure lambdas started within localstack so
      # that they use the external malpadev network.
      # This enables them to resolve names of containers
      # within the docker compose environment, providing
      # they have an alias on this network.
      - LAMBDA_DOCKER_NETWORK=malpadev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/localstack:/tmp/localstack
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4566/health?reload"]

  local-config:
    container_name: lpa-local-config
    image: lpa-local-config
    build:
      context: ./local-config/
      dockerfile: ./Dockerfile
    depends_on:
      dynamodb:
        condition: service_started
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
    volumes:
      - ./local-config/:/app/
    environment:
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"
      AWS_ENDPOINT_DYNAMODB: dynamodb:8000

      OPG_LPA_COMMON_SQS_ENDPOINT: localstack:4566
      OPG_LPA_COMMON_PDF_QUEUE_NAME: pdf-queue.fifo

      OPG_LPA_COMMON_S3_ENDPOINT: localstack:4566
      OPG_LPA_COMMON_PDF_CACHE_S3_BUCKET: "lpacache"

      OPG_LPA_COMMON_LAMBDA_ENDPOINT: localstack:4566
      FRONT_DOMAIN: localhost:7002

  # ---------------------------
  # Front

  front-web:
    container_name: lpa-front-web
    image: lpa-front-web
    depends_on:
      - front-app
      - front-v2-app
    volumes:
      - ./service-front/public:/web
    build:
      context: ./
      dockerfile: service-front/docker/web/Dockerfile
    environment:
      APP_HOST: front-app
      APP_PORT: 9000
      NGINX_LOG_LEVEL: warn
      APP_V2_HOST: front-v2-app
      APP_V2_PORT: 8005

  front-v2-app:
    container_name: lpa-front-v2-app
    image: lpa-front-v2-app
    build:
      context: ./
      dockerfile: service-front-v2/docker/app/Dockerfile
    environment:
      AWS_XRAY_SDK_ENABLED: "false"
    ports:
      - 8005:8005

  feedback-app:
    container_name: lpa-feedback-app
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/opg-feedback/front-app
    depends_on:
      - feedback-api
    environment:
      AWS_XRAY_SDK_ENABLED: "false"
    ports:
      - 9005:8005

  front-app:
    container_name: lpa-front-app
    image: lpa-front-app
    build:
      context: ./
# Ideally, debug would always be enabled for front-app, as we often want to debug it. In practice, this still runs too slowly so we leave it off as default
      args:
        ENABLE_XDEBUG: 0
      dockerfile: service-front/docker/app/Dockerfile
    volumes:
# to speed running, volumes are restricted to source code that may change while container is running
      - ./service-front/module:/app/module
      - ./service-front/config:/app/config
      - ./service-front/node_modules:/app/node_modules
      - ./service-front/assets:/app/assets
      - ./service-front/vendor:/app/vendor
      - ./service-front/public:/app/public
      - ./service-front/build:/app/build
      - ./tests:/app/tests
      - ./shared:/shared
    depends_on:
      dynamodb:
        condition: service_started
      localstack:
        condition: service_healthy
      local-config:
        condition: service_started
      node-build-assets:
        condition: service_started
      govpaystub:
        condition: service_started
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"

      OPG_LPA_ENDPOINTS_API: "http://api-web"

      OPG_LPA_COMMON_ADMIN_DYNAMODB_TABLE: "Properties"
      OPG_LPA_COMMON_CRONLOCK_DYNAMODB_TABLE: "Locks"
      OPG_LPA_COMMON_SESSION_DYNAMODB_TABLE: "Sessions"

      OPG_LPA_FRONT_CSRF_SALT: "test"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_DYNAMODB_ENDPOINT: http://dynamodb:8000

      PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1
      PHP_IDE_CONFIG: serverName=lpa-front-app

      OPG_LPA_FRONT_EMAIL_TRANSPORT: notify
      OPG_LPA_FRONT_EMAIL_NOTIFY_API_KEY: "${OPG_LPA_API_NOTIFY_API_KEY}"
      OPG_LPA_FRONT_GOV_PAY_KEY: "${OPG_LPA_FRONT_GOV_PAY_KEY}"
      OPG_LPA_FRONT_GOV_PAY_URL: "http://govpaystub:4545"
      OPG_LPA_FRONT_OS_PLACES_HUB_LICENSE_KEY: "${OPG_LPA_FRONT_OS_PLACES_HUB_LICENSE_KEY}"
      OPG_LPA_COMMON_ADMIN_ACCOUNTS: "${OPG_LPA_COMMON_ADMIN_ACCOUNTS}"
      OPG_LPA_COMMON_REDIS_CACHE_URL: tcp://redis:6379

      OPG_LPA_OS_PLACES_HUB_ENDPOINT : "https://api.os.uk/search/places/v1/postcode"
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/health-check.sh"
        ]
      interval: 10s
      timeout: 15s
      retries: 3
      start_period: 90s

  front-ssl:
    container_name: lpa-front-ssl
    image: lpa-front-ssl
    depends_on:
      - front-web
    build:
      context: ./
      dockerfile: local-ssl/docker/Dockerfile
    ports:
      - 7002:443
    volumes:
      - ./local-ssl/certs:/etc/nginx/certs
    environment:
      DOMAIN: "localhost"
      TARGET_HOST_HEADER: "localhost:7002"
      SSL_PORT: "443"
      TARGET_HOST: "front-web"
      TARGET_PORT: "80"

  # ---------------------------
  # API

  api-web:
    container_name: lpa-api-web
    image: lpa-api-web
    depends_on:
      - api-app
    build:
      context: ./
      dockerfile: service-api/docker/web/Dockerfile
    ports:
      - 7001:80
    environment:
      APP_HOST: api-app
      APP_PORT: 9000
      NGINX_LOG_LEVEL: warn

  api-app:
    container_name: lpa-api-app
    image: lpa-api-app
    build:
      context: ./
# Enable debug is recommended to default to off for api to avoid slowness. Turn this on if you ever need to debug the api
      args:
        ENABLE_XDEBUG: 0
        OPG_LPA_COMMON_APP_VERSION: "${OPG_LPA_COMMON_APP_VERSION}"
      dockerfile: service-api/docker/app/Dockerfile
    volumes:
# to speed running, volumes are restricted to source code that may change while container is running
      - ./service-api/bin:/app/bin
      - ./service-api/config:/app/config
      - ./service-api/module:/app/module
      - ./service-api/vendor:/app/vendor
      - ./shared:/shared
    depends_on:
      dynamodb:
        condition: service_started
      localstack:
        condition: service_healthy
      local-config:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"

      OPG_LPA_API_NOTIFY_API_KEY: "${OPG_LPA_API_NOTIFY_API_KEY}"
      OPG_LPA_POSTGRES_HOSTNAME: "postgres"
      OPG_LPA_POSTGRES_PORT: "5432"
      OPG_LPA_POSTGRES_NAME: "lpadb"
      OPG_LPA_POSTGRES_USERNAME: "lpauser"
      OPG_LPA_POSTGRES_PASSWORD: "lpapass"

      # Fake key; deliberately committed
      OPG_LPA_API_PDF_ENCRYPTION_KEY_DOCUMENT: "0L5Mn687f312aj827NQq648U7899o91r"

      OPG_LPA_COMMON_ADMIN_DYNAMODB_TABLE: "Properties"
      OPG_LPA_COMMON_PDF_CACHE_S3_BUCKET: "lpacache"
      OPG_LPA_COMMON_CRONLOCK_DYNAMODB_TABLE: "Locks"

      # if you have opg-data-lpa running locally, this allows the front-app
      # /ping endpoints to return more realistic values
      OPG_LPA_PROCESSING_STATUS_ENDPOINT: "http://host.docker.internal:4343/v1/"

      # lifetime (in seconds) of authentication tokens
      OPG_LPA_AUTH_TOKEN_TTL: 4500
      OPG_LPA_COMMON_DYNAMODB_AUTO_CREATE: "true"
      OPG_LPA_COMMON_ADMIN_ACCOUNTS: "${OPG_LPA_COMMON_ADMIN_ACCOUNTS}"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_DYNAMODB_ENDPOINT: http://dynamodb:8000
      OPG_LPA_COMMON_S3_ENDPOINT: http://localstack:4566
      OPG_LPA_COMMON_PDF_QUEUE_URL: http://localstack:4566/000000000000/pdf-queue.fifo

      OPG_LPA_TELEMETRY_HOST: ''
      OPG_LPA_TELEMETRY_PORT: ''

      PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1
      PHP_IDE_CONFIG: serverName=lpa-api-app
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/health-check.sh"
        ]
      interval: 10s
      timeout: 15s
      retries: 3
      start_period: 90s

  feedback-api:
    container_name: lpa-feedback-api
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/opg-feedback/rest-api
    depends_on:
      postgres:
        condition: service_healthy
      feedbackdb:
        condition: service_started
      aws-cli:
        condition: service_started
    environment:
      AWS_XRAY_SDK_ENABLED: "false"
      POSTGRES_HOSTNAME: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_NAME: "lpadb"
      POSTGRES_USERNAME: "lpauser"
      POSTGRES_PASSWORD: "lpapass"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_SECURITY_TOKEN: ${AWS_SECURITY_TOKEN}
      LOCAL_AWS_ENDPOINT: http://localstack:4566
    ports:
      - 9004:8005

  # ---------------------------
  # Admin

  admin-web:
    container_name: lpa-admin-web
    image: lpa-admin-web
    depends_on:
      - admin-app
    volumes:
      - ./service-admin/public:/web
    build:
      context: ./
      dockerfile: service-admin/docker/web/Dockerfile
    environment:
      APP_HOST: admin-app
      APP_PORT: 9000
      NGINX_LOG_LEVEL: warn

  admin-app:
    container_name: lpa-admin-app
    image: lpa-admin-app
    build:
      context: ./
      dockerfile: service-admin/docker/app/Dockerfile
# enable debug is recommended to default to off for admin app to avoid slowness, as admin is rarely debugged. Turn this on if you wish to debug the admin app
      args:
        ENABLE_XDEBUG: 0
    volumes:
# to speed running, volumes are restricted to source code that may change while container is running
      - ./service-admin/src:/app/src
      - ./service-admin/config:/app/config
      - ./service-admin/vendor:/app/vendor
      - ./shared:/shared
    depends_on:
      dynamodb:
        condition: service_started
      localstack:
        condition: service_healthy
      local-config:
        condition: service_started
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"

      OPG_LPA_ENDPOINTS_API: "http://api-web"

      OPG_LPA_COMMON_ADMIN_DYNAMODB_TABLE: "Properties"
      OPG_LPA_COMMON_CRONLOCK_DYNAMODB_TABLE: "Locks"
      OPG_LPA_COMMON_SESSION_DYNAMODB_TABLE: "Sessions"

      OPG_LPA_ADMIN_JWT_SECRET: "test-secret"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_DYNAMODB_ENDPOINT: http://dynamodb:8000

      PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1
      PHP_IDE_CONFIG: serverName=lpa-admin-app
      OPG_LPA_COMMON_ADMIN_ACCOUNTS: "${OPG_LPA_COMMON_ADMIN_ACCOUNTS}"
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/health-check.sh"
        ]
      interval: 10s
      timeout: 15s
      retries: 3
      start_period: 90s

  admin-ssl:
    container_name: lpa-admin-ssl
    image: lpa-admin-ssl
    depends_on:
      - admin-web
    build:
      context: ./
      dockerfile: local-ssl/docker/Dockerfile
    ports:
      - 7003:443
    volumes:
      - ./local-ssl/certs:/etc/nginx/certs
    environment:
      DOMAIN: "localhost"
      TARGET_HOST_HEADER: "localhost:7003"
      SSL_PORT: "443"
      TARGET_HOST: "admin-web"
      TARGET_PORT: "80"

  # ---------------------------
  # PDF

  pdf-app:
    container_name: lpa-pdf-app
    image: lpa-pdf-app
    depends_on:
      localstack:
        condition: service_healthy
      local-config:
        condition: service_started
    volumes:
      - ./service-pdf:/app
      - ./shared:/shared
    tmpfs:
      - /tmp/
    build:
      context: ./
      dockerfile: service-pdf/docker/app/Dockerfile
# Other containers are built with debug on. Lines could be put here to build pdf with debug, but not doing as default due to pdf being slow already
    environment:
      OPG_LPA_COMMON_PDF_CACHE_S3_BUCKET: "lpacache"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_S3_ENDPOINT: http://localstack:4566
      OPG_LPA_COMMON_PDF_QUEUE_URL: http://localstack:4566/000000000000/pdf-queue.fifo

  # ---------------------------
  # Seeding
  seeding:
    container_name: lpa-seeding
    image: lpa-seeding
    build:
      context: ./
      dockerfile: service-seeding/docker/app/Dockerfile
    depends_on:
      local-config:
          condition: service_started
      postgres:
          condition: service_healthy
      dynamodb:
          condition: service_started
      api-app:
          condition: service_started
    volumes:
      - ./scripts/non_live_seeding:/app
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"
      OPG_LPA_POSTGRES_HOSTNAME: "postgres"
      OPG_LPA_POSTGRES_PORT: "5432"
      OPG_LPA_POSTGRES_NAME: "lpadb"
      OPG_LPA_POSTGRES_USERNAME: "lpauser"
      OPG_LPA_POSTGRES_PASSWORD: "lpapass"

# aws-cli creates the secret in localstack, for feedback api
  aws-cli:
    container_name: lpa-feedback-aws-cli
    image: amazon/aws-cli:latest
    stdin_open: true
    tty: true
    environment:
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_ACCESS_KEY_ID=dummy
    command: --region="eu-west-1" --endpoint-url="http://localstack:4566" secretsmanager create-secret --name opg-flask-api-token --secret-string "{\"test\":\"secret\",\"secret\":\"test\"}"
    depends_on:
      localstack:
        condition: service_healthy

  # ---------------------------
  # Create feedback table and db user for PerfPlat
  feedbackdb:
    container_name: lpa-feedbackdb
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/opg-feedback/feedbackdb
    depends_on:
      localstack:
        condition: service_healthy
      local-config:
        condition: service_started
      api-app:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"
      OPG_LPA_POSTGRES_HOSTNAME: "postgres"
      OPG_LPA_POSTGRES_PORT: "5432"
      OPG_LPA_POSTGRES_NAME: "lpadb"
      OPG_LPA_POSTGRES_USERNAME: "lpauser"
      OPG_LPA_POSTGRES_PASSWORD: "lpapass"
      OPG_LPA_POSTGRES_FEEDBACK_USERNAME: "feedbackuser"
      OPG_LPA_POSTGRES_FEEDBACK_PASSWORD: "feedbackpass"
