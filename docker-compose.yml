version: "3.7"

# Additional external network for routing traffic from
# the proxy perfplat lambda to the worker perfplat lambda.
# This is required as non-docker lambdas are started within the
# localstack docker container (docker within docker),
# and don't have access to the default docker compose
# network. This means the proxy lambda is unable to make HTTP
# requests to the worker lambda. By adding an external
# network, we provide a route between the proxy lambda
# (started as a docker container within the localstack
# docker container) and the worker lambda (started as
# a docker container within the docker compose context).
networks:
  malpadev:
    external: true

services:
  # ---------------------------
  # Local Services

  node-build-assets:
    container_name: node-build-assets
    image: node-build-assets
    volumes:
      - ./service-front:/service-front:rw,delegated
    build:
      context: ./
      dockerfile: node-build-assets/docker/Dockerfile

  postgres:
    image: postgres:10.13
    ports:
      - 5432:5432
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: lpadb
      POSTGRES_USER: lpauser
      POSTGRES_PASSWORD: lpapass

  redis:
    image: library/redis:alpine
    ports:
      - 6379:6379

  dynamodb:
    image: amazon/dynamodb-local
    ports:
      - 8000:8000

  localstack:
    image: localstack/localstack:latest
    privileged: true
    ports:
      - 4566:4566
    environment:
      - SERVICES=sqs,s3,lambda
      - DEFAULT_REGION=eu-west-1
      - HOSTNAME=localstack
      - LAMBDA_EXECUTOR=docker
      - DEBUG=1
      # Configure lambdas started within localstack so
      # that they use the external malpadev network.
      # This enables them to resolve names of containers
      # within the docker compose environment, providing
      # they have an alias on this network.
      - LAMBDA_DOCKER_NETWORK=malpadev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/localstack:/tmp/localstack

  local-config:
    container_name: lpa-local-config
    build:
      context: ./local-config/
      dockerfile: ./Dockerfile
    depends_on:
      - dynamodb
      - postgres
      - localstack
    volumes:
      - ./local-config/:/app/
    environment:
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"
      AWS_ENDPOINT_DYNAMODB: dynamodb:8000

      OPG_LPA_COMMON_SQS_ENDPOINT: localstack:4566
      OPG_LPA_COMMON_PDF_QUEUE_NAME: pdf-queue.fifo
      OPG_LPA_COMMON_PERFPLAT_QUEUE_NAME: perfplat-queue.fifo

      OPG_LPA_COMMON_S3_ENDPOINT: localstack:4566
      OPG_LPA_COMMON_PDF_CACHE_S3_BUCKET: "lpacache"

      OPG_LPA_COMMON_LAMBDA_ENDPOINT: localstack:4566
      FRONT_DOMAIN: localhost:7002

  # ---------------------------
  # Front

  front-web:
    container_name: lpa-front-web
    image: lpa-front-web
    depends_on:
      - front-app
      - flask-app
    volumes:
      - ./service-front/public:/web
    build:
      context: ./
      dockerfile: service-front/docker/web/Dockerfile
    environment:
      APP_HOST: front-app
      APP_PORT: 9000
      NGINX_LOG_LEVEL: warn
      APP_V2_HOST: flask-app
      APP_V2_PORT: 8005

  flask-app:
    container_name: lpa-flask-app
    image: lpa-flask-app
    build:
      context: ./
      dockerfile: service-front-v2/docker/app/Dockerfile
    environment:
      AWS_XRAY_SDK_ENABLED: "false"
    ports:
      - 8005:8005

  front-app:
    container_name: lpa-front-app
    image: lpa-front-app
    build:
      context: ./
      dockerfile: service-front/docker/app/Dockerfile
    volumes:
      - ./service-front:/app
    depends_on:
      - dynamodb
      - localstack
      - local-config
      - node-build-assets
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"

      OPG_LPA_ENDPOINTS_API: "http://api-web"

      OPG_LPA_COMMON_ADMIN_DYNAMODB_TABLE: "Properties"
      OPG_LPA_COMMON_CRONLOCK_DYNAMODB_TABLE: "Locks"
      OPG_LPA_COMMON_SESSION_DYNAMODB_TABLE: "Sessions"

      OPG_LPA_FRONT_CSRF_SALT: "test"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_DYNAMODB_ENDPOINT: http://dynamodb:8000

      PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1
      PHP_IDE_CONFIG: serverName=lpa-front-app
      # ENABLE_XDEBUG: 'true'
      XDEBUG_MODE: 'debug'
      XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003

      OPG_LPA_FRONT_EMAIL_TRANSPORT: notify
      OPG_LPA_FRONT_EMAIL_SENDGRID_API_KEY: "${OPG_LPA_FRONT_EMAIL_SENDGRID_API_KEY}"
      OPG_LPA_FRONT_EMAIL_NOTIFY_API_KEY: "${OPG_LPA_API_NOTIFY_API_KEY}"
      OPG_LPA_FRONT_GOV_PAY_KEY: "${OPG_LPA_FRONT_GOV_PAY_KEY}"
      OPG_LPA_FRONT_OS_PLACES_HUB_LICENSE_KEY: "${OPG_LPA_FRONT_OS_PLACES_HUB_LICENSE_KEY}"
      OPG_LPA_COMMON_ADMIN_ACCOUNTS: "${OPG_LPA_COMMON_ADMIN_ACCOUNTS}"
      OPG_LPA_COMMON_REDIS_CACHE_URL: tcp://redis:6379

      OPG_LPA_OS_PLACES_HUB_ENDPOINT : "https://api.os.uk/search/places/v1/postcode"

  front-composer:
    image: composer:latest
    volumes:
      - ./service-front:/app
    command:
      - install
      - --prefer-dist
      - --no-interaction
      - --no-scripts
      - --optimize-autoloader
      - --ignore-platform-reqs

  front-ssl:
    container_name: lpa-front-ssl
    depends_on:
      - front-web
    build:
      context: ./
      dockerfile: local-ssl/docker/Dockerfile
    ports:
      - 7002:443
    volumes:
      - ./local-ssl/certs:/etc/nginx/certs
    environment:
      DOMAIN: "localhost"
      TARGET_HOST_HEADER: "localhost:7002"
      SSL_PORT: "443"
      TARGET_HOST: "front-web"
      TARGET_PORT: "80"

  # ---------------------------
  # API

  api-web:
    container_name: lpa-api-web
    image: lpa-api-web
    depends_on:
      - api-app
    build:
      context: ./
      dockerfile: service-api/docker/web/Dockerfile
    ports:
      - 7001:80
    environment:
      APP_HOST: api-app
      APP_PORT: 9000
      NGINX_LOG_LEVEL: warn

  api-app:
    container_name: lpa-api-app
    image: lpa-api-app
    build:
      context: ./
      dockerfile: service-api/docker/app/Dockerfile
    volumes:
      - ./service-api:/app
    depends_on:
      - dynamodb
      - localstack
      - local-config
      - postgres
      - gateway
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"

      OPG_LPA_API_NOTIFY_API_KEY: "${OPG_LPA_API_NOTIFY_API_KEY}"
      OPG_LPA_POSTGRES_HOSTNAME: "postgres"
      OPG_LPA_POSTGRES_PORT: "5432"
      OPG_LPA_POSTGRES_NAME: "lpadb"
      OPG_LPA_POSTGRES_USERNAME: "lpauser"
      OPG_LPA_POSTGRES_PASSWORD: "lpapass"

      # Fake key; deliberately committed
      OPG_LPA_API_PDF_ENCRYPTION_KEY_DOCUMENT: "0L5Mn687f312aj827NQq648U7899o91r"

      OPG_LPA_COMMON_ADMIN_DYNAMODB_TABLE: "Properties"
      OPG_LPA_COMMON_PDF_CACHE_S3_BUCKET: "lpacache"
      OPG_LPA_COMMON_CRONLOCK_DYNAMODB_TABLE: "Locks"

      OPG_LPA_PROCESSING_STATUS_ENDPOINT: "http://gateway:5000/lpa-online-tool/lpas/"

      # lifetime (in seconds) of authentication tokens
      OPG_LPA_AUTH_TOKEN_TTL: 4500
      OPG_LPA_COMMON_DYNAMODB_AUTO_CREATE: "true"
      OPG_LPA_COMMON_ADMIN_ACCOUNTS: "${OPG_LPA_COMMON_ADMIN_ACCOUNTS}"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_DYNAMODB_ENDPOINT: http://dynamodb:8000
      OPG_LPA_COMMON_S3_ENDPOINT: http://localstack:4566
      OPG_LPA_COMMON_PDF_QUEUE_URL: http://localstack:4566/000000000000/pdf-queue.fifo

      PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1
      PHP_IDE_CONFIG: serverName=lpa-api-app
      ENABLE_XDEBUG: "true"
      XDEBUG_MODE: "debug"
      XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003 mode=develop,debug

  api-composer:
    image: composer:latest
    volumes:
      - ./service-api:/app
    command:
      - install
      - --prefer-dist
      - --no-interaction
      - --no-scripts
      - --optimize-autoloader
      - --ignore-platform-reqs

  # ---------------------------
  # Admin

  admin-web:
    container_name: lpa-admin-web
    image: lpa-admin-web
    depends_on:
      - admin-app
    volumes:
      - ./service-admin/public:/web
    build:
      context: ./
      dockerfile: service-admin/docker/web/Dockerfile
    environment:
      APP_HOST: admin-app
      APP_PORT: 9000
      NGINX_LOG_LEVEL: warn

  admin-app:
    container_name: lpa-admin-app
    image: lpa-admin-app
    build:
      context: ./
      dockerfile: service-admin/docker/app/Dockerfile
    volumes:
      - ./service-admin:/app
    depends_on:
      - dynamodb
      - localstack
      - local-config
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"

      OPG_LPA_ENDPOINTS_API: "http://api-web"

      OPG_LPA_COMMON_ADMIN_DYNAMODB_TABLE: "Properties"
      OPG_LPA_COMMON_CRONLOCK_DYNAMODB_TABLE: "Locks"
      OPG_LPA_COMMON_SESSION_DYNAMODB_TABLE: "Sessions"

      OPG_LPA_ADMIN_JWT_SECRET: "test-secret"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_DYNAMODB_ENDPOINT: http://dynamodb:8000

      PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1
      # ENABLE_XDEBUG: 'true'
      PHP_IDE_CONFIG: serverName=lpa-admin-app
      OPG_LPA_COMMON_ADMIN_ACCOUNTS: "${OPG_LPA_COMMON_ADMIN_ACCOUNTS}"
      XDEBUG_MODE: 'debug'
      XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003

  admin-composer:
    image: composer:latest
    volumes:
      - ./service-admin:/app
    command:
      - install
      - --prefer-dist
      - --no-interaction
      - --no-scripts
      - --optimize-autoloader
      - --ignore-platform-reqs

  admin-ssl:
    container_name: lpa-admin-ssl
    depends_on:
      - admin-web
    build:
      context: ./
      dockerfile: local-ssl/docker/Dockerfile
    ports:
      - 7003:443
    volumes:
      - ./local-ssl/certs:/etc/nginx/certs
    environment:
      DOMAIN: "localhost"
      TARGET_HOST_HEADER: "localhost:7003"
      SSL_PORT: "443"
      TARGET_HOST: "admin-web"
      TARGET_PORT: "80"

  # ---------------------------
  # PDF

  pdf-app:
    container_name: lpa-pdf-app
    image: lpa-pdf-app
    depends_on:
      - localstack
      - local-config
    volumes:
      - ./service-pdf:/app
    build:
      context: ./
      dockerfile: service-pdf/docker/app/Dockerfile
    environment:
      OPG_LPA_COMMON_PDF_CACHE_S3_BUCKET: "lpacache"

      # Local only
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"

      OPG_LPA_COMMON_S3_ENDPOINT: http://localstack:4566
      OPG_LPA_COMMON_PDF_QUEUE_URL: http://localstack:4566/000000000000/pdf-queue.fifo

  pdf-composer:
    image: composer:latest
    volumes:
      - ./service-pdf:/app
    command:
      - install
      - --prefer-dist
      - --no-interaction
      - --no-scripts
      - --optimize-autoloader
      - --ignore-platform-reqs

  # ---------------------------
  # Seeding
  seeding:
    container_name: seeding
    image: seeding
    build:
      context: ./
      dockerfile: service-seeding/docker/app/Dockerfile
    depends_on:
      - localstack
      - local-config
      - api-app
      - postgres
      - api-composer
    environment:
      OPG_LPA_STACK_NAME: "local"
      OPG_LPA_STACK_ENVIRONMENT: "dev"
      OPG_LPA_POSTGRES_HOSTNAME: "postgres"
      OPG_LPA_POSTGRES_PORT: "5432"
      OPG_LPA_POSTGRES_NAME: "lpadb"
      OPG_LPA_POSTGRES_USERNAME: "lpauser"
      OPG_LPA_POSTGRES_PASSWORD: "lpapass"

  # ---------------------------
  # Sirius gateway mock
  gateway:
    container_name: gateway
    image: gateway
    build:
      context: ./service-gateway-mock
      dockerfile: ./Dockerfile-gateway
    depends_on:
      - mocksirius
    ports:
      - 7010:5000

  mocksirius:
    container_name: mocksirius
    image: mocksirius
    build:
      context: ./service-gateway-mock
      dockerfile: ./Dockerfile-mocksirius
    ports:
      - 7011:5000

  # ---------------------------
  # performance platform
  perfplatworker:
    container_name: perfplatworker
    image: perfplatworker
    build:
      context: ./service-perfplat
      dockerfile: ./docker/Dockerfile-worker-dev
    depends_on:
      - postgres
    ports:
      - 7020:8080
    volumes:
      - ./service-perfplat:/service-perfplat
    environment:
      OPG_LPA_POSTGRES_HOSTNAME: "postgres"
      OPG_LPA_POSTGRES_PORT: "5432"
      OPG_LPA_POSTGRES_NAME: "lpadb"
      OPG_LPA_POSTGRES_USERNAME: "lpauser"
      OPG_LPA_POSTGRES_PASSWORD: "lpapass"
    # Apply an alias to the worker lambda (running
    # as a docker compose container) on the malpadev
    # network. This enables localstack lambdas attached
    # to malpadev to reach the worker lambda through
    # this alias, so we can make requests to
    # http://perfplatworker/... In turn, this enables
    # us to forward events received by the proxy lambda
    # from the SQS queue on to the worker, by converting
    # them into HTTP POST requests to the worker lambda's
    # endpoint.
    networks:
      malpadev:
        aliases:
          - perfplatworker

  perfplatconfig:
    container_name: perfplatconfig
    image: perfplatconfig
    depends_on:
      - perfplatworker
      - local-config
      - localstack
    build:
      context: ./service-perfplat
      dockerfile: ./docker/Dockerfile-config-dev
    volumes:
      - ./service-perfplat:/service-perfplat
    environment:
      AWS_ACCESS_KEY_ID: "-"
      AWS_SECRET_ACCESS_KEY: "-"
